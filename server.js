// Generated by CoffeeScript 1.6.2
(function() {
  var app, clientConfig, config, debug, emptyGif, events, express, fs, geoip, https, lastSend, script, sendEvents, sending, useragent,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  geoip = require('geoip-lite');

  https = require('https');

  express = require('express');

  useragent = require('express-useragent');

  app = express();

  config = require('./config');

  debug = 1;

  events = [];

  if (config.kafka) {
    console.log('Got kafka config');
    sending = false;
    lastSend = new Date();
    sendEvents = function() {
      var event, eventStr, now, req, _i, _len;

      if (sending) {
        return;
      }
      if (!events.length) {
        return;
      }
      now = new Date();
      if (events.length < 1000 && now - lastSend < 1000) {
        return;
      }
      lastSend = now;
      sending = true;
      req = https.request({
        method: 'POST',
        host: config.kafka.host,
        port: config.kafka.port || 443,
        path: config.kafka.path,
        auth: config.kafka.username + ':' + config.kafka.password
      }, function(res) {
        var _ref;

        if ((200 <= (_ref = res.statusCode) && _ref < 300)) {
          console.log('Received ^_^');
        } else {
          console.log('STATUS: ' + res.statusCode);
          console.log('HEADERS: ' + JSON.stringify(res.headers));
        }
        events = [];
        sending = false;
      });
      req.on('error', function(e) {
        return console.log('problem with request: ' + e.message);
      });
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        eventStr = JSON.stringify(event);
        if (debug) {
          console.log(JSON.stringify(event));
        }
        req.write(JSON.stringify(event) + '\n');
      }
      req.end();
    };
  } else {
    console.log('No kafka config');
    sendEvents = function() {
      var event, _i, _len;

      for (_i = 0, _len = events.length; _i < _len; _i++) {
        event = events[_i];
        console.log('Event:', JSON.stringify(event));
      }
      events = [];
    };
  }

  setInterval(sendEvents, 200);

  app.use(useragent.express());

  app.use(express.compress());

  app.disable('x-powered-by');

  app.enable('trust proxy');

  emptyGif = Buffer('\x47\x49\x46\x38\x39\x61\x01\
\x00\x01\x00\xf0\x01\x00\xff\xff\xff\x00\x00\x00\
\x21\xf9\x04\x01\x0a\x00\x00\x00\x2c\x00\x00\x00\
\x00\x01\x00\x01\x00\x00\x02\x02\x44\x01\x00\x3b');

  clientConfig = {
    h: config.host
  };

  script = "(function(w,c) {\n  try {\n    var session = 'S' + (Math.random() * 1e10).toFixed();\n    var num = 0;\n    var now = new Date();\n    var initTime = +now;\n    var tzm = String(now).match(/\\((\\w+)\\)/);\n    w.flextrack = function(a) {\n      if (Object.prototype.toString.call(a) != '[object Object]') return false;\n      var a = {\n        S: session,\n        N: num++,\n        P: document.location.pathname,\n        L: +new Date() - initTime,\n        F: w.document.referrer || 'Direct',\n        C: screen.width + 'x' + screen.height,\n        X: w.scrollX,\n        Y: w.scrollY,\n        O: now.getTimezoneOffset(),\n        Z: (tzm && tzm.length === 2) ? tzm[1] : 'N/A'\n      };\n      if ('innerWidth' in window) {\n        a.W = w.innerWidth + 'x' + w.innerHeight;\n      } else {\n        var e = w.document.documentElement || w.document.body;\n        a.W = w.clientWidth + 'x' + w.clientHeight;\n      }\n      var params = [];\n      for (var k in a) params.push(encodeURIComponent(k) + \"=\" + encodeURIComponent(String(a[k])));\n      var i = new Image();\n      i.src = 'http://' + c.h + '/m.gif?' + params.join('&');\n      return true;\n    };\n  }catch(e){}\n})(window," + (JSON.stringify(clientConfig)) + ");";

  events = [];

  app.get('/script.js', function(req, res) {
    res.set('Content-Type', 'application/javascript');
    res.send(script);
  });

  app.get('/m.gif', function(req, res) {
    var event, geo, ip, k, ua, v, _ref;

    if (req.xhr) {
      res.send(500);
      return;
    }
    event = {};
    _ref = req.query;
    for (k in _ref) {
      if (!__hasProp.call(_ref, k)) continue;
      v = _ref[k];
      if (k === 'S') {
        k = 'session';
      }
      if (k === 'N') {
        k = 'number';
      }
      if (k === 'P') {
        k = 'path';
      }
      if (k === 'F') {
        k = 'referrer';
      }
      if (k === 'W') {
        k = 'window';
      }
      if (k === 'C') {
        k = 'screen';
      }
      if (k === 'Z') {
        k = 'timezone';
      }
      if (k === 'O') {
        k = 'timezone_offset';
      }
      if (k === 'L') {
        k = 'session_length';
      }
      if (k === 'X') {
        k = 'scroll_x';
      }
      if (k === 'Y') {
        k = 'scroll_y';
      }
      event[k] = v;
    }
    event['timestamp'] = (new Date()).toISOString();
    ip = req.ip;
    event['ip'] = ip;
    geo = geoip.lookup(ip) || {
      country: 'NoGeo',
      region: 'NoGeo',
      city: 'NoGeo',
      ll: ['', '']
    };
    event['country'] = geo.country || 'N/A';
    event['region'] = geo.region || 'N/A';
    event['city'] = geo.city || 'N/A';
    event['lat'] = geo.ll[0];
    event['lon'] = geo.ll[1];
    ua = req.useragent;
    event['browser'] = ua.Browser || 'N/A';
    event['browser_version'] = ua.Version || 'N/A';
    event['os'] = ua.OS || 'N/A';
    event['platform'] = ua.Platform || 'N/A';
    event['language'] = req.acceptedLanguages[0] || 'N/A';
    events.push(event);
    res.set('Content-Type', 'image/gif');
    res.send(emptyGif);
  });

  app.get('/ping', function(req, res) {
    res.send('pong');
  });

  app.get('/geo', function(req, res) {
    var geo, ip;

    ip = req.ip;
    geo = geoip.lookup(ip) || {
      country: 'NoGeo',
      region: 'NoGeo',
      city: 'NoGeo'
    };
    res.send("IP: " + ip + "\nCountry: " + geo.country + "\nRegion: " + geo.region + "\nCity: " + geo.city + "\nIPs: [" + req.ips + "]");
  });

  console.log("Started server on port 9090");

  app.listen(9090);

}).call(this);
